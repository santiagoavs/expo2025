import apiClient from './apiClient';

export const paymentMethodsService = {
  // Obtener todos los m√©todos de pago del usuario
  getPaymentMethods: async () => {
    try {
      console.log('üîç [paymentMethodsService] Obteniendo m√©todos de pago del usuario');
      
      const response = await apiClient.get('/payment-methods');
      
      console.log('‚úÖ [paymentMethodsService] M√©todos obtenidos:', response);
      return response.paymentMethods || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error obteniendo m√©todos:', error);
      throw error;
    }
  },

  // Crear un nuevo m√©todo de pago
  createPaymentMethod: async (paymentData) => {
    try {
      console.log('üÜï [paymentMethodsService] Creando m√©todo de pago:', {
        ...paymentData,
        number: paymentData.number ? `****${paymentData.number.slice(-4)}` : 'N/A',
        cvc: '***'
      });
      
      const response = await apiClient.post('/payment-methods', paymentData);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo creado:', response);
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error creando m√©todo:', error);
      throw error;
    }
  },

  // Actualizar un m√©todo de pago
  updatePaymentMethod: async (methodId, paymentData) => {
    try {
      console.log('üîÑ [paymentMethodsService] Actualizando m√©todo:', methodId, {
        ...paymentData,
        number: paymentData.number ? `****${paymentData.number.slice(-4)}` : 'N/A',
        cvc: '***'
      });
      
      const response = await apiClient.put(`/payment-methods/${methodId}`, paymentData);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo actualizado:', response);
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error actualizando m√©todo:', error);
      throw error;
    }
  },

  // Eliminar un m√©todo de pago
  deletePaymentMethod: async (methodId) => {
    try {
      console.log('üóëÔ∏è [paymentMethodsService] Eliminando m√©todo:', methodId);
      
      const response = await apiClient.delete(`/payment-methods/${methodId}`);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo eliminado');
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error eliminando m√©todo:', error);
      throw error;
    }
  },

  // Activar/desactivar un m√©todo de pago
  togglePaymentMethod: async (methodId, isActive) => {
    try {
      console.log('üîÑ [paymentMethodsService] Cambiando estado del m√©todo:', methodId, 'activo:', isActive);
      
      const response = await apiClient.patch(`/payment-methods/${methodId}/toggle`, {
        active: isActive
      });
      
      console.log('‚úÖ [paymentMethodsService] Estado cambiado');
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error cambiando estado:', error);
      throw error;
    }
  }
};