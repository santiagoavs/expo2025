import apiClient from './apiClient';

export const paymentMethodsService = {
  // Obtener todos los m√©todos de pago del usuario
  getPaymentMethods: async () => {
    try {
      console.log('üîç [paymentMethodsService] Obteniendo m√©todos de pago del usuario');
      
      const response = await apiClient.get('/user/payment-methods');
      
      console.log('‚úÖ [paymentMethodsService] M√©todos obtenidos:', response);
      return response.paymentMethods || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error obteniendo m√©todos:', error);
      throw error;
    }
  },

  // Obtener un m√©todo de pago espec√≠fico
  getPaymentMethod: async (methodId) => {
    try {
      console.log('üîç [paymentMethodsService] Obteniendo m√©todo espec√≠fico:', methodId);
      
      const response = await apiClient.get(`/user/payment-methods/${methodId}`);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo obtenido:', response);
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error obteniendo m√©todo:', error);
      throw error;
    }
  },

  // Crear un nuevo m√©todo de pago (con tokenizaci√≥n)
  createPaymentMethod: async (cardData, setAsDefault = false) => {
    try {
      console.log('üÜï [paymentMethodsService] Creando m√©todo de pago:', {
        number: cardData.number ? `****${cardData.number.slice(-4)}` : 'N/A',
        exp_month: cardData.expiry ? cardData.expiry.split('/')[0] : 'N/A',
        exp_year: cardData.expiry ? cardData.expiry.split('/')[1] : 'N/A',
        card_holder: cardData.name,
        nickname: cardData.nickname,
        setAsDefault
      });
      
      // Transformar datos del formato react-credit-cards al formato Wompi
      const wompiCardData = {
        number: cardData.number.replace(/\s/g, ''),
        cvc: cardData.cvc || '123', // CVC temporal para tokenizaci√≥n
        exp_month: cardData.expiry.split('/')[0],
        exp_year: cardData.expiry.split('/')[1],
        card_holder: cardData.name,
        nickname: cardData.nickname
      };
      
      const response = await apiClient.post('/user/payment-methods', {
        cardData: wompiCardData,
        setAsDefault
      });
      
      console.log('‚úÖ [paymentMethodsService] M√©todo creado:', response);
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error creando m√©todo:', error);
      throw error;
    }
  },

  // Actualizar un m√©todo de pago (solo nickname y configuraci√≥n)
  updatePaymentMethod: async (methodId, updateData) => {
    try {
      console.log('üîÑ [paymentMethodsService] Actualizando m√©todo:', methodId, updateData);
      
      const response = await apiClient.put(`/user/payment-methods/${methodId}`, updateData);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo actualizado:', response);
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error actualizando m√©todo:', error);
      throw error;
    }
  },

  // Eliminar un m√©todo de pago
  deletePaymentMethod: async (methodId) => {
    try {
      console.log('üóëÔ∏è [paymentMethodsService] Eliminando m√©todo:', methodId);
      
      const response = await apiClient.delete(`/user/payment-methods/${methodId}`);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo eliminado');
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error eliminando m√©todo:', error);
      throw error;
    }
  },

  // Marcar m√©todo como por defecto
  setDefaultPaymentMethod: async (methodId) => {
    try {
      console.log('‚≠ê [paymentMethodsService] Marcando m√©todo como por defecto:', methodId);
      
      const response = await apiClient.patch(`/user/payment-methods/${methodId}/default`);
      
      console.log('‚úÖ [paymentMethodsService] M√©todo marcado como por defecto');
      return response.paymentMethod || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error marcando como por defecto:', error);
      throw error;
    }
  },

  // Obtener estad√≠sticas de m√©todos de pago
  getPaymentMethodStats: async () => {
    try {
      console.log('üìä [paymentMethodsService] Obteniendo estad√≠sticas');
      
      const response = await apiClient.get('/user/payment-methods/stats');
      
      console.log('‚úÖ [paymentMethodsService] Estad√≠sticas obtenidas:', response);
      return response.stats || response.data || response;
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error obteniendo estad√≠sticas:', error);
      throw error;
    }
  },

  // M√©todo de compatibilidad para toggle (mapea a setDefault)
  togglePaymentMethod: async (methodId, isActive) => {
    try {
      console.log('üîÑ [paymentMethodsService] Toggle m√©todo (compatibilidad):', methodId, 'activo:', isActive);
      
      if (isActive) {
        // Si se est√° activando, marcarlo como por defecto
        return await this.setDefaultPaymentMethod(methodId);
      } else {
        // Si se est√° desactivando, no hay acci√≥n espec√≠fica (las tarjetas no se "desactivan")
        console.log('‚ÑπÔ∏è [paymentMethodsService] No se puede desactivar tarjeta, use eliminar en su lugar');
        throw new Error('Para desactivar una tarjeta, elim√≠nela en su lugar');
      }
    } catch (error) {
      console.error('‚ùå [paymentMethodsService] Error en toggle:', error);
      throw error;
    }
  }
};