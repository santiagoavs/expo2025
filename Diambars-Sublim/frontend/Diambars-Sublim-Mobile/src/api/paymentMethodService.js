// src/api/paymentMethodService.js - Servicio para m√©todos de pago en la app m√≥vil
import ApiClient from './ApiClient';

const paymentMethodService = {
  // ==================== M√âTODOS DE PAGO DE ADMINISTRACI√ìN ====================

  /**
   * Obtener todas las configuraciones de m√©todos de pago (ADMIN)
   */
  async getPaymentConfigs() {
    try {
      console.log('‚öôÔ∏è [paymentMethodService] Obteniendo configuraciones de m√©todos de pago');
      
      const response = await ApiClient.get('/payment-config');
      
      console.log('üîç [paymentMethodService] Respuesta recibida:', response);
      
      // Validar que la respuesta tenga la estructura esperada
      if (response && response.success && Array.isArray(response.configs)) {
        console.log(`‚úÖ [paymentMethodService] ${response.configs.length} configuraciones obtenidas`);
        return response;
      } else {
        console.warn('‚ö†Ô∏è [paymentMethodService] Respuesta con estructura inesperada:', response);
        return {
          success: true,
          configs: [],
          count: 0,
          message: 'No hay configuraciones disponibles'
        };
      }
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error obteniendo configuraciones:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Obtener estad√≠sticas de m√©todos de pago (ADMIN)
   */
  async getPaymentStats() {
    try {
      console.log('üìä [paymentMethodService] Obteniendo estad√≠sticas de pagos');
      
      const response = await ApiClient.get('/payment-config/stats');
      
      console.log('üîç [paymentMethodService] Estad√≠sticas recibidas:', response);
      
      // Validar que la respuesta tenga la estructura esperada
      if (response && response.success && response.stats) {
        console.log(`‚úÖ [paymentMethodService] Estad√≠sticas obtenidas: ${response.stats.totalMethods} m√©todos totales`);
        return response;
      } else {
        console.warn('‚ö†Ô∏è [paymentMethodService] Respuesta de estad√≠sticas con estructura inesperada:', response);
        return {
          success: true,
          stats: {
            totalMethods: 0,
            activeMethods: 0,
            inactiveMethods: 0,
            methods: []
          }
        };
      }
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error obteniendo estad√≠sticas:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Crear nueva configuraci√≥n de m√©todo de pago (ADMIN)
   */
  async createPaymentConfig(configData) {
    try {
      console.log('‚ûï [paymentMethodService] Creando nueva configuraci√≥n:', configData.type);
      
      const response = await ApiClient.post('/payment-config', configData);
      
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error creando configuraci√≥n:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Actualizar configuraci√≥n existente (ADMIN)
   */
  async updatePaymentConfig(type, configData) {
    try {
      console.log('‚úèÔ∏è [paymentMethodService] Actualizando configuraci√≥n:', type);
      
      const response = await ApiClient.put(`/payment-config/${type}`, configData);
      
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error actualizando configuraci√≥n:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Eliminar configuraci√≥n de m√©todo de pago (ADMIN)
   */
  async deletePaymentConfig(type) {
    try {
      console.log('üóëÔ∏è [paymentMethodService] Eliminando configuraci√≥n:', type);
      
      const response = await ApiClient.delete(`/payment-config/${type}`);
      
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error eliminando configuraci√≥n:', error);
      throw this.handleError(error);
    }
  },

  // ==================== M√âTODOS DE PAGO P√öBLICOS ====================

  /**
   * Obtener m√©todos de pago disponibles p√∫blicamente
   */
  async getAvailablePaymentMethods() {
    try {
      console.log('üåê [paymentMethodService] Obteniendo m√©todos de pago disponibles');
      
      const response = await ApiClient.get('/payment-config/public/available');
      
      console.log('üîç [paymentMethodService] Respuesta recibida:', response);
      
      // Validar que la respuesta tenga la estructura esperada
      if (response && response.success && Array.isArray(response.methods)) {
        console.log(`‚úÖ [paymentMethodService] ${response.methods.length} m√©todos disponibles`);
        return response;
      } else {
        console.warn('‚ö†Ô∏è [paymentMethodService] Respuesta con estructura inesperada:', response);
        return {
          success: true,
          methods: [],
          count: 0,
          message: 'No hay m√©todos de pago disponibles'
        };
      }
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error obteniendo m√©todos disponibles:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Obtener configuraci√≥n p√∫blica de m√©todos de pago
   */
  async getPublicPaymentConfig() {
    try {
      console.log('üåê [paymentMethodService] Obteniendo configuraci√≥n p√∫blica');
      
      const response = await ApiClient.get('/payment-config/public');
      
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error obteniendo configuraci√≥n p√∫blica:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Obtener configuraci√≥n por tipo de m√©todo
   */
  async getPaymentMethodByType(type) {
    try {
      console.log(`üîç [paymentMethodService] Obteniendo m√©todo: ${type}`);
      
      const response = await ApiClient.get(`/payment-config/${type}`);
      
      return response;
    } catch (error) {
      console.error(`‚ùå [paymentMethodService] Error obteniendo m√©todo ${type}:`, error);
      throw this.handleError(error);
    }
  },

  /**
   * Obtener tipos de m√©todos soportados
   */
  async getSupportedTypes() {
    try {
      console.log('üìã [paymentMethodService] Obteniendo tipos soportados');
      
      const response = await ApiClient.get('/payment-config/supported-types');
      
      return response;
    } catch (error) {
      console.error('‚ùå [paymentMethodService] Error obteniendo tipos soportados:', error);
      throw this.handleError(error);
    }
  },

  /**
   * Manejo de errores centralizado
   */
  handleError(error) {
    if (error.response) {
      // Error de respuesta del servidor
      const errorData = {
        status: error.response.status,
        message: error.response.data?.message || 'Error del servidor',
        errors: error.response.data?.errors || null,
        code: error.response.data?.error || 'SERVER_ERROR'
      };
      
      // Logs espec√≠ficos para diferentes errores
      switch (error.response.status) {
        case 400:
          console.error('‚ùå [paymentMethodService] Datos inv√°lidos');
          break;
        case 401:
          console.error('‚ùå [paymentMethodService] Error de autenticaci√≥n');
          break;
        case 403:
          console.error('‚ùå [paymentMethodService] Sin permisos');
          break;
        case 404:
          console.error('‚ùå [paymentMethodService] M√©todo no encontrado');
          break;
        case 409:
          console.error('‚ùå [paymentMethodService] Conflicto en la operaci√≥n');
          break;
        case 422:
          console.error('‚ùå [paymentMethodService] Error de validaci√≥n');
          break;
        default:
          console.error('‚ùå [paymentMethodService] Error del servidor');
      }
      
      return errorData;
    } else if (error.request) {
      // Error de conexi√≥n
      return {
        status: 0,
        message: 'Error de conexi√≥n. Verifica tu internet.',
        code: 'NETWORK_ERROR'
      };
    } else {
      // Error de configuraci√≥n
      return {
        status: 0,
        message: error.message || 'Error inesperado',
        code: 'CLIENT_ERROR'
      };
    }
  }
};

export default paymentMethodService;
