#!/usr/bin/env node

/**
 * Script de verificaci√≥n para la configuraci√≥n m√≥vil (192.168.1.21)
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n m√≥vil (192.168.1.21)...\n');

try {
  // Verificar apiConfig.js
  const apiConfigPath = path.join(__dirname, 'src/config/apiConfig.js');
  if (fs.existsSync(apiConfigPath)) {
    const apiConfig = fs.readFileSync(apiConfigPath, 'utf8');
    if (apiConfig.includes('192.168.1.21')) {
      console.log('‚úÖ apiConfig.js configurado para IP local (192.168.1.21)');
    } else {
      console.log('‚ùå apiConfig.js no est√° configurado para IP local');
    }
  } else {
    console.log('‚ùå apiConfig.js no encontrado');
  }

  // Verificar ApiClient.js
  const apiClientPath = path.join(__dirname, 'src/api/ApiClient.js');
  if (fs.existsSync(apiClientPath)) {
    const apiClient = fs.readFileSync(apiClientPath, 'utf8');
    if (apiClient.includes('getApiConfig') && apiClient.includes('apiConfig')) {
      console.log('‚úÖ ApiClient.js usa configuraci√≥n centralizada');
    } else {
      console.log('‚ùå ApiClient.js no usa configuraci√≥n centralizada');
    }
  } else {
    console.log('‚ùå ApiClient.js no encontrado');
  }

  // Verificar networkDiagnostic.js
  const networkPath = path.join(__dirname, 'src/utils/networkDiagnostic.js');
  if (fs.existsSync(networkPath)) {
    const network = fs.readFileSync(networkPath, 'utf8');
    if (network.includes('getApiUrl') && network.includes('testApiConnection')) {
      console.log('‚úÖ networkDiagnostic.js configurado correctamente');
    } else {
      console.log('‚ùå networkDiagnostic.js no est√° configurado correctamente');
    }
  } else {
    console.log('‚ùå networkDiagnostic.js no encontrado');
  }

  console.log('\nüìã Resumen de la configuraci√≥n m√≥vil:');
  console.log('   ‚Ä¢ Desarrollo: React Native ‚Üí 172.20.10.4:4000');
  console.log('   ‚Ä¢ Producci√≥n: React Native ‚Üí 172.20.10.4:4000 (backend local)');
  console.log('   ‚Ä¢ Configuraci√≥n centralizada en apiConfig.js');
  console.log('   ‚Ä¢ Diagn√≥stico de red disponible');
  console.log('   ‚Ä¢ ‚úÖ NO usa Render - solo backend local');

  console.log('\n‚ö†Ô∏è  IMPORTANTE:');
  console.log('   ‚Ä¢ Aseg√∫rate de que el backend est√© corriendo en 172.20.10.4:4000');
  console.log('   ‚Ä¢ Verifica que la IP sea accesible desde tu dispositivo m√≥vil');
  console.log('   ‚Ä¢ Usa el diagn√≥stico de red para verificar conectividad');
  console.log('   ‚Ä¢ La app m√≥vil NO se conectar√° a Render, solo al backend local');

  console.log('\nüéâ Verificaci√≥n completada');
  console.log('üí° La app m√≥vil est√° configurada para usar IP local');

} catch (error) {
  console.error('‚ùå Error en la verificaci√≥n:', error.message);
  process.exit(1);
}
