#!/usr/bin/env node

/**
 * Script de verificaci√≥n para la migraci√≥n a Render
 * Verifica que todas las configuraciones est√©n correctas
 */

// Simular import.meta.env para Node.js
const mockEnv = {
  DEV: process.env.NODE_ENV !== 'production'
};

// Simular import.meta
global.import = {
  meta: {
    env: mockEnv
  }
};

// Importar configuraci√≥n despu√©s de simular import.meta
const { getConfig, getApiUrl, getBaseUrl } = require('./config.js');

console.log('üîç Verificando configuraci√≥n de migraci√≥n a Render...\n');

try {
  const config = getConfig();
  
  console.log('üìã Configuraci√≥n detectada:');
  console.log(`   Entorno: ${config.isDevelopment ? 'Desarrollo' : 'Producci√≥n'}`);
  console.log(`   API URL: ${config.apiUrl}`);
  console.log(`   Base URL: ${config.baseUrl}`);
  console.log(`   Timeout: ${config.app.timeout}ms`);
  console.log(`   App: ${config.app.name} v${config.app.version}\n`);

  // Verificar que la URL de Render est√© configurada
  if (config.apiUrl.includes('expo2025-8bjn.onrender.com')) {
    console.log('‚úÖ URL de Render configurada correctamente');
  } else {
    console.log('‚ö†Ô∏è URL de Render no detectada, usando configuraci√≥n local');
  }

  // Verificar que el proxy est√© configurado para desarrollo
  if (config.isDevelopment && config.apiUrl === '/api') {
    console.log('‚úÖ Proxy de Vite configurado para desarrollo');
  } else if (!config.isDevelopment) {
    console.log('‚úÖ Configuraci√≥n de producci√≥n activa');
  }

  console.log('\nüéâ Verificaci√≥n completada exitosamente');
  console.log('üí° La aplicaci√≥n est√° lista para usar Render como backend');

} catch (error) {
  console.error('‚ùå Error en la verificaci√≥n:', error.message);
  process.exit(1);
}
